name: CI/CD Pipeline for Multi-Arch Build

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    #     pip install pytest

    # - name: Run tests
    #   run: |
    #     pytest tests/

  docker-build-multiarch:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        platforms: linux/amd64,linux/arm64
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      
    - name: Docker meta
      id: docker_meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/pikvm-client-service
        tags: |
          type=sha,format=long
          type=ref,event=branch
          type=raw,value=dev-latest
    
    - name: Build and push multi-arch image
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.docker_meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # deploy-dev:
    # needs: docker-build-multiarch
    # runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    # steps:
    # - name: Deploy to Dev Environment
    #   uses: appleboy/ssh-action@master
    #   with:
    #     host: ${{ secrets.DEV_SERVER_HOST }}
    #     username: ${{ secrets.DEV_SERVER_USER }}
    #     key: ${{ secrets.DEV_SERVER_SSH_KEY }}
    #     script: |
    #       docker pull ${{ secrets.DOCKERHUB_USERNAME }}/pikvm-client-service:dev-latest
    #       docker stop pikvm-client-service || true
    #       docker rm pikvm-client-service || true
    #       docker run -d \
    #         --name pikvm-client-service \
    #         --restart unless-stopped \
    #         -p 50051:50051 \
    #         ${{ secrets.DOCKERHUB_USERNAME }}/pikvm-client-service:dev-latest
